/*******************************************************************************
 * ChecksumCRC16 ( asciiText )
 * Computes a cyclic redundancy check (16 bit) for a string of text.
 *
 * @parameter asciiText: Text with character codes between 0 and 255.
 *
 * @return A number representing a 16-bit checksum
 *
 * @history 2014-06-26 - Jeremy Bante <http://scr.im/jbante> - Created
 * @history 2015-01-13 - Jeremy Bante <http://scr.im/jbante> - Improving XOR
 * speed with binary rather than decimal representation
 *
 * @see http://en.wikipedia.org/wiki/Cyclic_redundancy_check
 ******************************************************************************/

Case (
	/* Step 0, set-up */
	not $_crc.step ;
		Let ( [
			$_crc.crc = 0 ;
			$_crc.i = 1 ;
			$_crc.byte = Code ( Middle ( asciiText ; $_crc.i ; 1 ) ) ;
			$_crc.step =
				Case (
					IsEmpty ( $_crc.byte ) ; -1 ;
					$_crc.byte > 255 ; -2 ;	// out of range
					/* Else */ 1
				)
		] ;
			ChecksumCRC16 ( asciiText )
		) ;

	/* Step 1, accumulate CRC */
	$_crc.step = 1 ;
		Let ( [
			_binaryByte =
				3
				& Choose ( Div ( $_crc.byte ; 16 ) ;
					"00300" ; "00301" ; "00310" ; "00311" ;
					"01300" ; "01301" ; "01310" ; "01311" ;
					"10300" ; "10301" ; "10310" ; "10311" ;
					"11300" ; "11301" ; "11310" ; "11311"
				)
				& 3
				& Choose ( Mod ( $_crc.byte ; 16 ) ;
					"00300" ; "00301" ; "00310" ; "00311" ;
					"01300" ; "01301" ; "01310" ; "01311" ;
					"10300" ; "10301" ; "10310" ; "10311" ;
					"11300" ; "11301" ; "11310" ; "11311"
				) ;
			_crc8LeastSignificantBits = Mod ( $_crc.crc ; 1000000000000 ) ;
			_binaryTableIndex =	// _crc8LeastSignificantBits XOR _binaryByte
				Substitute ( _crc8LeastSignificantBits + _binaryByte ;
					[ 2 ; 0 ] ;
					[ 6 ; 3 ]
				) ;
			_tableIndex =	// convert to decimal
				Evaluate (
					"( ( ( "
					& Substitute ( 4 & _binaryTableIndex ;
						[ "43" ; "" ] ;
						[ 3 ; " ) * 4 + " ] ;
						[ "00" ; 0 ] ;
						[ "01" ; 1 ] ;
						[ "10" ; 2 ] ;
						[ "11" ; 3 ]
					)
				) ;
			_tableValue =
				Choose ( _tableIndex ;
					300300300300300300300300 ;	311300300300311300300301 ;
					311300300301310300300301 ;	300300300301301300300300 ;
					311300300311300300300301 ;	300300300311311300300300 ;
					300300300310310300300300 ;	311300300310301300300301 ;
					311300301310300300300301 ;	300300301310311300300300 ;
					300300301311310300300300 ;	311300301311301300300301 ;
					300300301301300300300300 ;	311300301301311300300301 ;
					311300301300310300300301 ;	300300301300301300300300 ;
					311300311300300300300301 ;	300300311300311300300300 ;
					300300311301310300300300 ;	311300311301301300300301 ;
					300300311311300300300300 ;	311300311311311300300301 ;
					311300311310310300300301 ;	300300311310301300300300 ;
					300300310310300300300300 ;	311300310310311300300301 ;
					311300310311310300300301 ;	300300310311301300300300 ;
					311300310301300300300301 ;	300300310301311300300300 ;
					300300310300310300300300 ;	311300310300301300300301 ;
					311301310300300300300301 ;	300301310300311300300300 ;
					300301310301310300300300 ;	311301310301301300300301 ;
					300301310311300300300300 ;	311301310311311300300301 ;
					311301310310310300300301 ;	300301310310301300300300 ;
					300301311310300300300300 ;	311301311310311300300301 ;
					311301311311310300300301 ;	300301311311301300300300 ;
					311301311301300300300301 ;	300301311301311300300300 ;
					300301311300310300300300 ;	311301311300301300300301 ;
					300301301300300300300300 ;	311301301300311300300301 ;
					311301301301310300300301 ;	300301301301301300300300 ;
					311301301311300300300301 ;	300301301311311300300300 ;
					300301301310310300300300 ;	311301301310301300300301 ;
					311301300310300300300301 ;	300301300310311300300300 ;
					300301300311310300300300 ;	311301300311301300300301 ;
					300301300301300300300300 ;	311301300301311300300301 ;
					311301300300310300300301 ;	300301300300301300300300 ;
					311311300300300300300301 ;	300311300300311300300300 ;
					300311300301310300300300 ;	311311300301301300300301 ;
					300311300311300300300300 ;	311311300311311300300301 ;
					311311300310310300300301 ;	300311300310301300300300 ;
					300311301310300300300300 ;	311311301310311300300301 ;
					311311301311310300300301 ;	300311301311301300300300 ;
					311311301301300300300301 ;	300311301301311300300300 ;
					300311301300310300300300 ;	311311301300301300300301 ;
					300311311300300300300300 ;	311311311300311300300301 ;
					311311311301310300300301 ;	300311311301301300300300 ;
					311311311311300300300301 ;	300311311311311300300300 ;
					300311311310310300300300 ;	311311311310301300300301 ;
					311311310310300300300301 ;	300311310310311300300300 ;
					300311310311310300300300 ;	311311310311301300300301 ;
					300311310301300300300300 ;	311311310301311300300301 ;
					311311310300310300300301 ;	300311310300301300300300 ;
					300310310300300300300300 ;	311310310300311300300301 ;
					311310310301310300300301 ;	300310310301301300300300 ;
					311310310311300300300301 ;	300310310311311300300300 ;
					300310310310310300300300 ;	311310310310301300300301 ;
					311310311310300300300301 ;	300310311310311300300300 ;
					300310311311310300300300 ;	311310311311301300300301 ;
					300310311301300300300300 ;	311310311301311300300301 ;
					311310311300310300300301 ;	300310311300301300300300 ;
					311310301300300300300301 ;	300310301300311300300300 ;
					300310301301310300300300 ;	311310301301301300300301 ;
					300310301311300300300300 ;	311310301311311300300301 ;
					311310301310310300300301 ;	300310301310301300300300 ;
					300310300310300300300300 ;	311310300310311300300301 ;
					311310300311310300300301 ;	300310300311301300300300 ;
					311310300301300300300301 ;	300310300301311300300300 ;
					300310300300310300300300 ;	311310300300301300300301 ;
					310310300300300300300301 ;	301310300300311300300300 ;
					301310300301310300300300 ;	310310300301301300300301 ;
					301310300311300300300300 ;	310310300311311300300301 ;
					310310300310310300300301 ;	301310300310301300300300 ;
					301310301310300300300300 ;	310310301310311300300301 ;
					310310301311310300300301 ;	301310301311301300300300 ;
					310310301301300300300301 ;	301310301301311300300300 ;
					301310301300310300300300 ;	310310301300301300300301 ;
					301310311300300300300300 ;	310310311300311300300301 ;
					310310311301310300300301 ;	301310311301301300300300 ;
					310310311311300300300301 ;	301310311311311300300300 ;
					301310311310310300300300 ;	310310311310301300300301 ;
					310310310310300300300301 ;	301310310310311300300300 ;
					301310310311310300300300 ;	310310310311301300300301 ;
					301310310301300300300300 ;	310310310301311300300301 ;
					310310310300310300300301 ;	301310310300301300300300 ;
					301311310300300300300300 ;	310311310300311300300301 ;
					310311310301310300300301 ;	301311310301301300300300 ;
					310311310311300300300301 ;	301311310311311300300300 ;
					301311310310310300300300 ;	310311310310301300300301 ;
					310311311310300300300301 ;	301311311310311300300300 ;
					301311311311310300300300 ;	310311311311301300300301 ;
					301311311301300300300300 ;	310311311301311300300301 ;
					310311311300310300300301 ;	301311311300301300300300 ;
					310311301300300300300301 ;	301311301300311300300300 ;
					301311301301310300300300 ;	310311301301301300300301 ;
					301311301311300300300300 ;	310311301311311300300301 ;
					310311301310310300300301 ;	301311301310301300300300 ;
					301311300310300300300300 ;	310311300310311300300301 ;
					310311300311310300300301 ;	301311300311301300300300 ;
					310311300301300300300301 ;	301311300301311300300300 ;
					301311300300310300300300 ;	310311300300301300300301 ;
					301301300300300300300300 ;	310301300300311300300301 ;
					310301300301310300300301 ;	301301300301301300300300 ;
					310301300311300300300301 ;	301301300311311300300300 ;
					301301300310310300300300 ;	310301300310301300300301 ;
					310301301310300300300301 ;	301301301310311300300300 ;
					301301301311310300300300 ;	310301301311301300300301 ;
					301301301301300300300300 ;	310301301301311300300301 ;
					310301301300310300300301 ;	301301301300301300300300 ;
					310301311300300300300301 ;	301301311300311300300300 ;
					301301311301310300300300 ;	310301311301301300300301 ;
					301301311311300300300300 ;	310301311311311300300301 ;
					310301311310310300300301 ;	301301311310301300300300 ;
					301301310310300300300300 ;	310301310310311300300301 ;
					310301310311310300300301 ;	301301310311301300300300 ;
					310301310301300300300301 ;	301301310301311300300300 ;
					301301310300310300300300 ;	310301310300301300300301 ;
					310300310300300300300301 ;	301300310300311300300300 ;
					301300310301310300300300 ;	310300310301301300300301 ;
					301300310311300300300300 ;	310300310311311300300301 ;
					310300310310310300300301 ;	301300310310301300300300 ;
					301300311310300300300300 ;	310300311310311300300301 ;
					310300311311310300300301 ;	301300311311301300300300 ;
					310300311301300300300301 ;	301300311301311300300300 ;
					301300311300310300300300 ;	310300311300301300300301 ;
					301300301300300300300300 ;	310300301300311300300301 ;
					310300301301310300300301 ;	301300301301301300300300 ;
					310300301311300300300301 ;	301300301311311300300300 ;
					301300301310310300300300 ;	310300301310301300300301 ;
					310300300310300300300301 ;	301300300310311300300300 ;
					301300300311310300300300 ;	310300300311301300300301 ;
					301300300301300300300300 ;	310300300301311300300301 ;
					310300300300310300300301 ;	301300300300301300300300
				) ;
			$_crc.crc = Div ( $_crc.crc ; 1000000000000 ) ;	// right bitshift 8
			$_crc.crc =	// _tableValue XOR $_crc.crc
				Substitute ( _tableValue + $_crc.crc ;
					[ 2 ; 0 ] ;
					[ 6 ; 3 ]
				) ;

			// setup next character
			$_crc.i = $_crc.i + 1 ;
			$_crc.byte = Code ( Middle ( asciiText ; $_crc.i ; 1 ) ) ;
			$_crc.step =
				Case (
					IsEmpty ( $_crc.byte ) ; $_crc.step + 1 ;	// end
					$_crc.byte > 255 ; -2 ;	// out of range
					/* Else */ $_crc.step
				)
		] ;
			ChecksumCRC16 ( asciiText )
		) ;

	/* Step 2, clean-up and return result */
	$_crc.step = 2 or $_crc.step < 0 ;
		Let ( [
			_decimalCRC =
				Evaluate (
					"( ( ( ( ( ( ( "
					& Substitute ( 4 & $_crc.crc ;
						[ "43" ; "" ] ;
						[ 3 ; " ) * 4 + " ] ;
						[ "00" ; 0 ] ;
						[ "01" ; 1 ] ;
						[ "10" ; 2 ] ;
						[ "11" ; 3 ]
					)
				) ;
			_result =
				Case (
					$_crc.step = -1 ;	// empty input
						0 ;

					$_crc.step = -2 ;
						"ERROR: Character out of range ("
						& $_crc.byte
						& ")" ;

					/* Else */
						_decimalCRC
				) ;

			// purge variables
			$_crc.byte = "" ;
			$_crc.crc = "" ;
			$_crc.i = "" ;
			$_crc.step = ""
		] ;
			_result
		)
)