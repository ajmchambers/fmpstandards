/**
 * =====================================
 * Error ( type ; errorCode ; description ; details )
 *
 * RETURNS:
 *		Specified errorCode. Raises $error as JSON.
 *
 * PARAMETERS:
 *		type = (text) Origin of the error.
 *			(e.g., "fmp", "app", "plugin:ScriptMaster", etc.)
 *		code = (number) Code for the error.
 *		description = (text) description of the error, preferably
 *			human readable and decipherable.
 *		details = (object) JSON object including desired details
 *			at the time of error generation. This should help a developer
 *			determine why the error occured. See ErrorEnvironment() function.
 *			It can also be a text string.
 *			(e.g., "creating a new invoice record")
 *
 * DEPENDENCIES:
 *		ErrorMessage()
 *
 * NOTE:
 *		IMPORTANT! You typically don't call this function directly.
 *		Most error calls within your scripts should use Error* functions
 *		directly after a potential error happens. This function can be used
 *		if you collect multiple error codes within a script and perform
 *		post processing on those error codes.
 *		Environmental data should be included at the time the error occurs.
 *		See the ErrorEnvironment() function.
 *
 * HISTORY:
 *		MODIFIED on 2024-JUN-04 by Matt Petrowsky editor@filemakermagazine.com
 *			- Modified to use Get ( LastErrorDetail ) as an object.
 *		MODIFIED on 2023-DEC-23 by Robert Naud robert@accoladeplusaccolade.com
 *			- Updated to return errorCode instead of JSON and raise $error.
 *		MODIFIED on 2022-AUG-01 by Matt Petrowsky editor@filemakermagazine.com
 *			- Updated to use JSON functions.
 *		MODIFIED on 2013-NOV-22 by Daniel Smith dansmith65@gmail.com
 *			- change name to Error, update documentation
 *		CREATED on 2013-OCT-11 by Daniel Smith dansmith65@gmail.com
 *
 * REFERENCES:
 *		https://github.com/filemakerstandards/fmpstandards/tree/master/Functions/Errors
 * =====================================
 */

Let ( [
	// Special notice: Do not use or maintain any calls to this function within the Data Viewer while debugging!

	~code = errorCode;
	~description = description;
	~type = If ( IsEmpty ( type ) ; "fmp" ; type );
	~contextData = details;
	~contextDataInJSON = "{\"test\":" & ~contextData & "}";
	~contextDataType = JSONGetElementType ( ~contextDataInJSON ; "test" );
	~contextDataType = If ( ~contextDataType > 1 ; ~contextDataType ; 1);
	~errorDetailType = If ( IsEmpty ( Get ( LastErrorDetail ) ) ; JSONNull ; JSONObject );
	~errorDetailJSON = If ( ~errorDetailType = JSONObject ;
			JSONSetElement ( "{}" ;
			[ "script" ; GetValue ( Get ( LastErrorDetail ) ; 1 ) ; JSONString ];
			[ "step" ; GetValue ( Get ( LastErrorDetail ) ; 2 ) ; JSONString ];
			[ "line" ; GetValue ( Get ( LastErrorDetail ) ; 3 ) ; JSONNumber ];
			[ "message" ; GetValue ( Get ( LastErrorDetail ) ; 4 ) ; JSONString ]
		)
	);

	~script = Get ( ScriptName );

	~json = JSONSetElement ( "{}" ; [ "code" ; ~code ; JSONNumber ] ; [ "type" ; ~type ; JSONString ] );
	~json = Case (
				not IsEmpty ( ~description );
					JSONSetElement ( ~json ; "description" ; ~description ; JSONString );

				~type = "fmp";
					JSONSetElement ( ~json ; "description" ; ErrorMessage ( ~code ) ; JSONString );

				/*default*/
					~json
			);

	~json = Case (
		Get ( LastError ) ;
			JSONSetElement ( ~json ;
				[ "location.script" ; GetValue ( Get ( LastErrorLocation ) ; 1 ) ; JSONString ];
				[ "location.step" ; GetValue ( Get ( LastErrorLocation ) ; 2 ) ; JSONString ];
				[ "location.line" ; GetValue ( Get ( LastErrorLocation ) ; 3 ) ; JSONNumber ];
				[ "detail" ; ~errorDetailJSON ; ~errorDetailType ]
			);

		/*default result, Get( LastError ) = 0*/
			JSONSetElement ( ~json ;
				[ "location.scriptName" ; ~script ; JSONString ] )
		);

	~json = JSONSetElement ( ~json ; "environment" ; ErrorDetails ; JSONObject );
	~json = If ( IsEmpty ( ~contextData ) ; ~json ; JSONSetElement ( ~json ; "context.data" ; ~contextData ; ~contextDataType ) );

	// Assign reserved $error variable to json only when a script is running.
	//~assign = If ( not IsEmpty ( ~script ) ; Let ( $error = ~json ; "" ) )
	$error = ~json

];
	// Simply passing error code through.
	~code
)